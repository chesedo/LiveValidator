<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Live Validator</title>
    <link>https://chesedo.github.io/LiveValidator/</link>
    <description>Recent content on Live Validator</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Oct 2016 14:27:57 +0200</lastBuildDate>
    <atom:link href="https://chesedo.github.io/LiveValidator/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Methods</title>
      <link>https://chesedo.github.io/LiveValidator/docs/methods/</link>
      <pubDate>Wed, 12 Oct 2016 14:27:57 +0200</pubDate>
      
      <guid>https://chesedo.github.io/LiveValidator/docs/methods/</guid>
      <description>

&lt;h3 id=&#34;setrequired&#34;&gt;setRequired&lt;/h3&gt;

&lt;p&gt;&lt;p class=&#34;uk-text-muted&#34;&gt;Parameters: {boolean} &amp;lt;doCheck = false&amp;gt;&lt;/p&gt;

This will mark the input(s) as required. The theme should take care of any visuals that it will use to indicate that the input is required. You can specify if a check should be done to see if the input(s) is/are currently empty at the same time (false by default), else this will happen automatically when the input is changed.&lt;/p&gt;

&lt;h3 id=&#34;unsetrequired&#34;&gt;unsetRequired&lt;/h3&gt;

&lt;p&gt;&lt;p class=&#34;uk-text-muted&#34;&gt;Parameters: None&lt;/p&gt;

Use this to make the input(s) unrequired. Like &lt;a href=&#34;#setrequired&#34;&gt;setRequired&lt;/a&gt;, the theme should handle the removal of the visual mark which indicated that the input was required. A check is automatically run with this call to remove any visuals that may no longer be needed.&lt;/p&gt;

&lt;h4 id=&#34;example-of-changing-required-state&#34;&gt;Example of changing required state&lt;/h4&gt;

&lt;p&gt;


    &lt;ul class=&#34;uk-tab&#34; data-uk-tab=&#34;{connect:&#39;#switcher-example-method-setRequired-unsetRequired&#39;, animation: &#39;slide-horizontal&#39;}&#34;&gt;
        &lt;li class=&#34;uk-active&#34;&gt;&lt;a href=&#34;&#34;&gt;Example&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;HTML&lt;/a&gt;&lt;/li&gt;
        
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul id=&#34;switcher-example-method-setRequired-unsetRequired&#34; class=&#34;uk-switcher uk-margin&#34;&gt;
        &lt;li&gt;
            &lt;div class=&#34;row&#34;&gt;
    &lt;label&gt;Label&lt;/label&gt;
    &lt;input type=&#34;text&#34; id=&#34;changeRequired&#34;/&gt;
    &lt;button type=&#34;button&#34; class=&#34;uk-button&#34; id=&#34;btn-setRequired&#34;&gt;Set Required&lt;/button&gt;
    &lt;button type=&#34;button&#34; class=&#34;uk-button&#34; id=&#34;btn-unsetRequired&#34;&gt;Unset Required&lt;/button&gt;
&lt;/div&gt;

        &lt;/li&gt;
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt;
    &amp;lt;label&amp;gt;Label&amp;lt;/label&amp;gt;
    &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;changeRequired&amp;#34;/&amp;gt;
    &amp;lt;button type=&amp;#34;button&amp;#34; class=&amp;#34;uk-button&amp;#34; id=&amp;#34;btn-setRequired&amp;#34;&amp;gt;Set Required&amp;lt;/button&amp;gt;
    &amp;lt;button type=&amp;#34;button&amp;#34; class=&amp;#34;uk-button&amp;#34; id=&amp;#34;btn-unsetRequired&amp;#34;&amp;gt;Unset Required&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
        &lt;/li&gt;
        
        
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$( function() {
    var input = $( &amp;#39;#changeRequired&amp;#39; ).LiveValidator();

    $( &amp;#39;#btn-setRequired&amp;#39; ).click( function( e ) {
        $( input ).LiveValidator( &amp;#39;setRequired&amp;#39; );
    } );
    $( &amp;#39;#btn-unsetRequired&amp;#39; ).click( function( e ) {
        $( input ).LiveValidator( &amp;#39;unsetRequired&amp;#39; );
    } );
} );
&lt;/code&gt;&lt;/pre&gt;
            &lt;script type=&#34;text/javascript&#34;&gt;$( function() {
    var input = $( &#39;#changeRequired&#39; ).LiveValidator();

    $( &#39;#btn-setRequired&#39; ).click( function( e ) {
        $( input ).LiveValidator( &#39;setRequired&#39; );
    } );
    $( &#39;#btn-unsetRequired&#39; ).click( function( e ) {
        $( input ).LiveValidator( &#39;unsetRequired&#39; );
    } );
} );
&lt;/script&gt;
        &lt;/li&gt;
        
    &lt;/ul&gt;
    



&lt;div class=&#34;uk-alert&#34;&gt;Notice how the input is marked as missing when setRequired is clicked because it has true for the &lt;code&gt;doCheck&lt;/code&gt; option. Also notice how unsetRequired automatically removes the missing visual if needed.&lt;/div&gt;

&lt;/p&gt;

&lt;h3 id=&#34;enablelive&#34;&gt;enableLive&lt;/h3&gt;

&lt;p&gt;&lt;p class=&#34;uk-text-muted&#34;&gt;Parameters: {boolean} &amp;lt;doCheck = false&amp;gt;&lt;/p&gt;

This turns live validation on - validation that happens as the user types input. It cause all the checks set in &lt;a href=&#34;https://chesedo.github.io/LiveValidator/docs/options/#checks&#34;&gt;checks&lt;/a&gt; to be checked on each input event. Here the option &lt;code&gt;doCheck&lt;/code&gt; can also be used to indicate that a full check should be run after live validation has been enabled.&lt;/p&gt;

&lt;h3 id=&#34;disablelive&#34;&gt;disableLive&lt;/h3&gt;

&lt;p&gt;&lt;p class=&#34;uk-text-muted&#34;&gt;Parameters: None&lt;/p&gt;

Use this if you want to disable the live validation. This will cause the set &lt;a href=&#34;https://chesedo.github.io/LiveValidator/docs/options/#checks&#34;&gt;checks&lt;/a&gt; to only be run when the input looses focus.&lt;/p&gt;

&lt;h4 id=&#34;example-of-changing-live-validation-state&#34;&gt;Example of changing live validation state&lt;/h4&gt;




    &lt;ul class=&#34;uk-tab&#34; data-uk-tab=&#34;{connect:&#39;#switcher-example-method-enableLive-disableLive&#39;, animation: &#39;slide-horizontal&#39;}&#34;&gt;
        &lt;li class=&#34;uk-active&#34;&gt;&lt;a href=&#34;&#34;&gt;Example&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;HTML&lt;/a&gt;&lt;/li&gt;
        
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul id=&#34;switcher-example-method-enableLive-disableLive&#34; class=&#34;uk-switcher uk-margin&#34;&gt;
        &lt;li&gt;
            &lt;div class=&#34;row&#34;&gt;
    &lt;label&gt;Label&lt;/label&gt;
    &lt;input type=&#34;text&#34; id=&#34;changeLiveValidation&#34; pattern=&#34;^[0-9]+$&#34; title=&#34;Only numerics allowed&#34;/&gt;
    &lt;button type=&#34;button&#34; class=&#34;uk-button&#34; id=&#34;btn-enableLive&#34;&gt;Enable Live Validation&lt;/button&gt;
    &lt;button type=&#34;button&#34; class=&#34;uk-button&#34; id=&#34;btn-disableLive&#34;&gt;Disable Live Validation&lt;/button&gt;
&lt;/div&gt;

        &lt;/li&gt;
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt;
    &amp;lt;label&amp;gt;Label&amp;lt;/label&amp;gt;
    &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;changeLiveValidation&amp;#34; pattern=&amp;#34;^[0-9]&amp;#43;$&amp;#34; title=&amp;#34;Only numerics allowed&amp;#34;/&amp;gt;
    &amp;lt;button type=&amp;#34;button&amp;#34; class=&amp;#34;uk-button&amp;#34; id=&amp;#34;btn-enableLive&amp;#34;&amp;gt;Enable Live Validation&amp;lt;/button&amp;gt;
    &amp;lt;button type=&amp;#34;button&amp;#34; class=&amp;#34;uk-button&amp;#34; id=&amp;#34;btn-disableLive&amp;#34;&amp;gt;Disable Live Validation&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
        &lt;/li&gt;
        
        
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$( function() {
    var input = $( &amp;#39;#changeLiveValidation&amp;#39; ).LiveValidator();

    $( &amp;#39;#btn-enableLive&amp;#39; ).click( function( e ) {
        $( input ).LiveValidator( &amp;#39;enableLive&amp;#39; );
    } );
    $( &amp;#39;#btn-disableLive&amp;#39; ).click( function( e ) {
        $( input ).LiveValidator( &amp;#39;disableLive&amp;#39; );
    } );
} );
&lt;/code&gt;&lt;/pre&gt;
            &lt;script type=&#34;text/javascript&#34;&gt;$( function() {
    var input = $( &#39;#changeLiveValidation&#39; ).LiveValidator();

    $( &#39;#btn-enableLive&#39; ).click( function( e ) {
        $( input ).LiveValidator( &#39;enableLive&#39; );
    } );
    $( &#39;#btn-disableLive&#39; ).click( function( e ) {
        $( input ).LiveValidator( &#39;disableLive&#39; );
    } );
} );
&lt;/script&gt;
        &lt;/li&gt;
        
    &lt;/ul&gt;
    



&lt;h3 id=&#34;addchecks&#34;&gt;addChecks&lt;/h3&gt;

&lt;p&gt;&lt;p class=&#34;uk-text-muted&#34;&gt;Parameters: {array} checks&lt;/p&gt;

This method allows you to add a check or multiple checks after LiveValidator has been instantiated. This can be useful when you want to change the validation based on other inputs.&lt;/p&gt;

&lt;h3 id=&#34;removechecks&#34;&gt;removeChecks&lt;/h3&gt;

&lt;p&gt;&lt;p class=&#34;uk-text-muted&#34;&gt;Parameters: {array} checks&lt;/p&gt;

It is also possible to remove checks as is needed after instantiation.&lt;/p&gt;

&lt;h3 id=&#34;removeallchecks&#34;&gt;removeAllChecks&lt;/h3&gt;

&lt;p&gt;&lt;p class=&#34;uk-text-muted&#34;&gt;Parameters: None&lt;/p&gt;

You can also clear all checks and start fresh using this.&lt;/p&gt;

&lt;h4 id=&#34;example-of-changing-the-checks&#34;&gt;Example of changing the checks&lt;/h4&gt;




    &lt;ul class=&#34;uk-tab&#34; data-uk-tab=&#34;{connect:&#39;#switcher-example-method-changeChecks&#39;, animation: &#39;slide-horizontal&#39;}&#34;&gt;
        &lt;li class=&#34;uk-active&#34;&gt;&lt;a href=&#34;&#34;&gt;Example&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;HTML&lt;/a&gt;&lt;/li&gt;
        
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul id=&#34;switcher-example-method-changeChecks&#34; class=&#34;uk-switcher uk-margin&#34;&gt;
        &lt;li&gt;
            &lt;div class=&#34;row&#34;&gt;
    &lt;label&gt;Label&lt;/label&gt;
    &lt;input type=&#34;text&#34; id=&#34;changeChecks&#34; required/&gt;
    &lt;button type=&#34;button&#34; class=&#34;uk-button&#34; id=&#34;btn-addCheck&#34;&gt;Add a Check&lt;/button&gt;
    &lt;button type=&#34;button&#34; class=&#34;uk-button&#34; id=&#34;btn-removeLast&#34;&gt;Remove Last Added&lt;/button&gt;
    &lt;button type=&#34;button&#34; class=&#34;uk-button&#34; id=&#34;btn-removeAll&#34;&gt;Remove All Checks&lt;/button&gt;
&lt;/div&gt;

        &lt;/li&gt;
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt;
    &amp;lt;label&amp;gt;Label&amp;lt;/label&amp;gt;
    &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;changeChecks&amp;#34; required/&amp;gt;
    &amp;lt;button type=&amp;#34;button&amp;#34; class=&amp;#34;uk-button&amp;#34; id=&amp;#34;btn-addCheck&amp;#34;&amp;gt;Add a Check&amp;lt;/button&amp;gt;
    &amp;lt;button type=&amp;#34;button&amp;#34; class=&amp;#34;uk-button&amp;#34; id=&amp;#34;btn-removeLast&amp;#34;&amp;gt;Remove Last Added&amp;lt;/button&amp;gt;
    &amp;lt;button type=&amp;#34;button&amp;#34; class=&amp;#34;uk-button&amp;#34; id=&amp;#34;btn-removeAll&amp;#34;&amp;gt;Remove All Checks&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
        &lt;/li&gt;
        
        
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$( function() {
    var input = $( &amp;#39;#changeChecks&amp;#39; ).LiveValidator();

    var checks = [
        &amp;#34;isNumber&amp;#34;,
        {&amp;#34;min&amp;#34;: 5},
        {&amp;#34;max&amp;#34;: 15}
    ];
    var i = 0;

    $( &amp;#39;#btn-addCheck&amp;#39; ).click( function( e ) {
        if ( i &amp;lt; checks.length )
            $( input ).LiveValidator( &amp;#39;addChecks&amp;#39;, checks[i&amp;#43;&amp;#43;] );
    } );
    $( &amp;#39;#btn-removeLast&amp;#39; ).click( function( e ) {
        if ( i &amp;gt; 0 )
            $( input ).LiveValidator( &amp;#39;removeChecks&amp;#39;, checks[--i] );
    } );
    $( &amp;#39;#btn-removeAll&amp;#39; ).click( function( e ) {
        i = 0;
        $( input ).LiveValidator( &amp;#39;removeAllChecks&amp;#39; );
    } );
} );
&lt;/code&gt;&lt;/pre&gt;
            &lt;script type=&#34;text/javascript&#34;&gt;$( function() {
    var input = $( &#39;#changeChecks&#39; ).LiveValidator();

    var checks = [
        &#34;isNumber&#34;,
        {&#34;min&#34;: 5},
        {&#34;max&#34;: 15}
    ];
    var i = 0;

    $( &#39;#btn-addCheck&#39; ).click( function( e ) {
        if ( i &lt; checks.length )
            $( input ).LiveValidator( &#39;addChecks&#39;, checks[i++] );
    } );
    $( &#39;#btn-removeLast&#39; ).click( function( e ) {
        if ( i &gt; 0 )
            $( input ).LiveValidator( &#39;removeChecks&#39;, checks[--i] );
    } );
    $( &#39;#btn-removeAll&#39; ).click( function( e ) {
        i = 0;
        $( input ).LiveValidator( &#39;removeAllChecks&#39; );
    } );
} );
&lt;/script&gt;
        &lt;/li&gt;
        
    &lt;/ul&gt;
    



&lt;h3 id=&#34;isvalid&#34;&gt;isValid&lt;/h3&gt;

&lt;p&gt;&lt;p class=&#34;uk-text-muted&#34;&gt;Parameters: None&lt;/p&gt;

This can be used to check if an input is valid. It will rerun the required check and then the other testers if needed.

&lt;div class=&#34;uk-alert&#34;&gt;When called using jQuery it will run on all inputs in the selector and on all children of the selector(s).&lt;/div&gt;

&lt;/p&gt;

&lt;h3 id=&#34;destroy&#34;&gt;destroy&lt;/h3&gt;

&lt;p&gt;&lt;p class=&#34;uk-text-muted&#34;&gt;Parameters: None&lt;/p&gt;

Use this when you want to destroy the plug-in.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://chesedo.github.io/LiveValidator/docs/getting-started/</link>
      <pubDate>Wed, 20 Jul 2016 16:01:23 +0200</pubDate>
      
      <guid>https://chesedo.github.io/LiveValidator/docs/getting-started/</guid>
      <description>

&lt;h2 id=&#34;creation&#34;&gt;Creation&lt;/h2&gt;

&lt;p&gt;To start using the plug-in, just call it on a jQuery object.&lt;/p&gt;

&lt;h3 id=&#34;calling-the-plug-in&#34;&gt;Calling the plug-in&lt;/h3&gt;

&lt;p&gt;


    &lt;ul class=&#34;uk-tab&#34; data-uk-tab=&#34;{connect:&#39;#switcher-example-options-required&#39;, animation: &#39;slide-horizontal&#39;}&#34;&gt;
        &lt;li class=&#34;uk-active&#34;&gt;&lt;a href=&#34;&#34;&gt;Example&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;HTML&lt;/a&gt;&lt;/li&gt;
        
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul id=&#34;switcher-example-options-required&#34; class=&#34;uk-switcher uk-margin&#34;&gt;
        &lt;li&gt;
            &lt;div class=&#34;row&#34;&gt;
    &lt;label&gt;Label&lt;/label&gt;
    &lt;input type=&#34;text&#34; id=&#34;auto-required&#34; required /&gt;
&lt;/div&gt;

        &lt;/li&gt;
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt;
    &amp;lt;label&amp;gt;Label&amp;lt;/label&amp;gt;
    &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;auto-required&amp;#34; required /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
        &lt;/li&gt;
        
        
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$( function() {
    test = $( &amp;#39;#auto-required&amp;#39; ).LiveValidator();
} );
&lt;/code&gt;&lt;/pre&gt;
            &lt;script type=&#34;text/javascript&#34;&gt;$( function() {
    test = $( &#39;#auto-required&#39; ).LiveValidator();
} );
&lt;/script&gt;
        &lt;/li&gt;
        
    &lt;/ul&gt;
    



&lt;div class=&#34;uk-alert&#34;&gt;Notice how the required attribute is detected on the input and handled by the theme to add the asterisk.&lt;/div&gt;

&lt;/p&gt;

&lt;h3 id=&#34;passing-options-to-the-plug-in&#34;&gt;Passing options to the plug-in&lt;/h3&gt;

&lt;p&gt;It is also possible to overwrite the plug-in options per instantiation. Just pass in a object with any of the valid &lt;a href=&#34;https://chesedo.github.io/LiveValidator/docs/options/&#34;&gt;options&lt;/a&gt;.



    &lt;ul class=&#34;uk-tab&#34; data-uk-tab=&#34;{connect:&#39;#switcher-example-gs-options&#39;, animation: &#39;slide-horizontal&#39;}&#34;&gt;
        &lt;li class=&#34;uk-active&#34;&gt;&lt;a href=&#34;&#34;&gt;Example&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;HTML&lt;/a&gt;&lt;/li&gt;
        
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul id=&#34;switcher-example-gs-options&#34; class=&#34;uk-switcher uk-margin&#34;&gt;
        &lt;li&gt;
            &lt;div class=&#34;row&#34;&gt;
    &lt;label&gt;Label&lt;/label&gt;
    &lt;input type=&#34;text&#34; id=&#34;passed-options&#34;/&gt;
&lt;/div&gt;

        &lt;/li&gt;
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt;
    &amp;lt;label&amp;gt;Label&amp;lt;/label&amp;gt;
    &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;passed-options&amp;#34;/&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
        &lt;/li&gt;
        
        
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$( function() {
    $( &amp;#39;#passed-options&amp;#39; ).LiveValidator( { required: true } );
} );
&lt;/code&gt;&lt;/pre&gt;
            &lt;script type=&#34;text/javascript&#34;&gt;$( function() {
    $( &#39;#passed-options&#39; ).LiveValidator( { required: true } );
} );
&lt;/script&gt;
        &lt;/li&gt;
        
    &lt;/ul&gt;
    

&lt;/p&gt;

&lt;h3 id=&#34;passing-options-via-data&#34;&gt;Passing options via data&lt;/h3&gt;

&lt;p&gt;The plug-in will also check for &lt;code&gt;data-*&lt;/code&gt; attributes and combines them into the options. This makes it easy to have a lot of inputs with many options.



    &lt;ul class=&#34;uk-tab&#34; data-uk-tab=&#34;{connect:&#39;#switcher-example-gs-data-options&#39;, animation: &#39;slide-horizontal&#39;}&#34;&gt;
        &lt;li class=&#34;uk-active&#34;&gt;&lt;a href=&#34;&#34;&gt;Example&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;HTML&lt;/a&gt;&lt;/li&gt;
        
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul id=&#34;switcher-example-gs-data-options&#34; class=&#34;uk-switcher uk-margin&#34;&gt;
        &lt;li&gt;
            &lt;div class=&#34;row&#34;&gt;
    &lt;label&gt;Label&lt;/label&gt;
    &lt;!-- The `isNumber` check comes from html5validation.js --&gt;
    &lt;input type=&#34;text&#34; id=&#34;data-options&#34; data-checks=&#39;[ &#34;isNumber&#34; ]&#39;/&gt;
&lt;/div&gt;

        &lt;/li&gt;
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt;
    &amp;lt;label&amp;gt;Label&amp;lt;/label&amp;gt;
    &amp;lt;!-- The `isNumber` check comes from html5validation.js --&amp;gt;
    &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;data-options&amp;#34; data-checks=&amp;#39;[ &amp;#34;isNumber&amp;#34; ]&amp;#39;/&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
        &lt;/li&gt;
        
        
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$( function() {
    $( &amp;#39;#data-options&amp;#39; ).LiveValidator();
} );
&lt;/code&gt;&lt;/pre&gt;
            &lt;script type=&#34;text/javascript&#34;&gt;$( function() {
    $( &#39;#data-options&#39; ).LiveValidator();
} );
&lt;/script&gt;
        &lt;/li&gt;
        
    &lt;/ul&gt;
    



&lt;div class=&#34;uk-alert&#34;&gt;Note the example of how to set array &amp;amp; object options correctly - with the double quotes on the inside - this insures that they are parsed correctly.&lt;/div&gt;

&lt;/p&gt;

&lt;h3 id=&#34;changing-default-options&#34;&gt;Changing default options&lt;/h3&gt;

&lt;p&gt;Sometimes it is also needed to change the default options before initiating a set of inputs - setting the theme data is a good example of this.&lt;/p&gt;

&lt;p&gt;To do this, just call the plug-in directly and pass in a object of &lt;a href=&#34;https://chesedo.github.io/LiveValidator/docs/options/&#34;&gt;options&lt;/a&gt; to overwrite.



    &lt;ul class=&#34;uk-tab&#34; data-uk-tab=&#34;{connect:&#39;#switcher-example-gs-default-options&#39;, animation: &#39;slide-horizontal&#39;}&#34;&gt;
        &lt;li class=&#34;uk-active&#34;&gt;&lt;a href=&#34;&#34;&gt;Example&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;HTML&lt;/a&gt;&lt;/li&gt;
        
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul id=&#34;switcher-example-gs-default-options&#34; class=&#34;uk-switcher uk-margin&#34;&gt;
        &lt;li&gt;
            &lt;div id=&#34;numbers&#34;&gt;
    &lt;div class=&#34;row&#34;&gt;
        &lt;label&gt;Label&lt;/label&gt;
        &lt;input type=&#34;text&#34; id=&#34;default-options1&#34;/&gt;
    &lt;/div&gt;
    &lt;div class=&#34;row&#34;&gt;
        &lt;label&gt;Label&lt;/label&gt;
        &lt;input type=&#34;text&#34; id=&#34;default-options2&#34;/&gt;
    &lt;/div&gt;
&lt;/div&gt;

        &lt;/li&gt;
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&amp;#34;numbers&amp;#34;&amp;gt;
    &amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt;
        &amp;lt;label&amp;gt;Label&amp;lt;/label&amp;gt;
        &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;default-options1&amp;#34;/&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt;
        &amp;lt;label&amp;gt;Label&amp;lt;/label&amp;gt;
        &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;default-options2&amp;#34;/&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
        &lt;/li&gt;
        
        
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$( function() {
    // The `isNumber` check comes from html5validation.js
    $.LiveValidator( { checks: [ &amp;#39;isNumber&amp;#39; ] } );

    // Inputs will contain the two inputs and not `div#numbers`
    var inputs = $( &amp;#39;#numbers&amp;#39; ).LiveValidator();
} );
&lt;/code&gt;&lt;/pre&gt;
            &lt;script type=&#34;text/javascript&#34;&gt;$( function() {
    // The `isNumber` check comes from html5validation.js
    $.LiveValidator( { checks: [ &#39;isNumber&#39; ] } );

    // Inputs will contain the two inputs and not `div#numbers`
    var inputs = $( &#39;#numbers&#39; ).LiveValidator();
} );
&lt;/script&gt;
        &lt;/li&gt;
        
    &lt;/ul&gt;
    

&lt;/p&gt;


&lt;div class=&#34;uk-alert&#34;&gt;Also note how to instantiate multiple inputs with one call - which can be an alternative to overwriting the defaults. This is because the plug-in automatically filters the jQuery object to contain only supported inputs. They are also returned from the instantiation.&lt;/div&gt;



&lt;h2 id=&#34;after-creation&#34;&gt;After creation&lt;/h2&gt;

&lt;p&gt;Now that you know how to create a instance of the plug-in on inputs, you will be able to do two primary things with this instance.&lt;/p&gt;

&lt;h3 id=&#34;calling-methods&#34;&gt;Calling methods&lt;/h3&gt;

&lt;p&gt;The plug-in exposes some &lt;a href=&#34;https://chesedo.github.io/LiveValidator/docs/methods/&#34;&gt;methods&lt;/a&gt; that can be called after instantiation. They can be called by passing them in as a string when calling the plug-in.



    &lt;ul class=&#34;uk-tab&#34; data-uk-tab=&#34;{connect:&#39;#switcher-example-method-setRequired-unsetRequired&#39;, animation: &#39;slide-horizontal&#39;}&#34;&gt;
        &lt;li class=&#34;uk-active&#34;&gt;&lt;a href=&#34;&#34;&gt;Example&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;HTML&lt;/a&gt;&lt;/li&gt;
        
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul id=&#34;switcher-example-method-setRequired-unsetRequired&#34; class=&#34;uk-switcher uk-margin&#34;&gt;
        &lt;li&gt;
            &lt;div class=&#34;row&#34;&gt;
    &lt;label&gt;Label&lt;/label&gt;
    &lt;input type=&#34;text&#34; id=&#34;changeRequired&#34;/&gt;
    &lt;button type=&#34;button&#34; class=&#34;uk-button&#34; id=&#34;btn-setRequired&#34;&gt;Set Required&lt;/button&gt;
    &lt;button type=&#34;button&#34; class=&#34;uk-button&#34; id=&#34;btn-unsetRequired&#34;&gt;Unset Required&lt;/button&gt;
&lt;/div&gt;

        &lt;/li&gt;
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt;
    &amp;lt;label&amp;gt;Label&amp;lt;/label&amp;gt;
    &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;changeRequired&amp;#34;/&amp;gt;
    &amp;lt;button type=&amp;#34;button&amp;#34; class=&amp;#34;uk-button&amp;#34; id=&amp;#34;btn-setRequired&amp;#34;&amp;gt;Set Required&amp;lt;/button&amp;gt;
    &amp;lt;button type=&amp;#34;button&amp;#34; class=&amp;#34;uk-button&amp;#34; id=&amp;#34;btn-unsetRequired&amp;#34;&amp;gt;Unset Required&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
        &lt;/li&gt;
        
        
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$( function() {
    var input = $( &amp;#39;#changeRequired&amp;#39; ).LiveValidator();

    $( &amp;#39;#btn-setRequired&amp;#39; ).click( function( e ) {
        $( input ).LiveValidator( &amp;#39;setRequired&amp;#39; );
    } );
    $( &amp;#39;#btn-unsetRequired&amp;#39; ).click( function( e ) {
        $( input ).LiveValidator( &amp;#39;unsetRequired&amp;#39; );
    } );
} );
&lt;/code&gt;&lt;/pre&gt;
            &lt;script type=&#34;text/javascript&#34;&gt;$( function() {
    var input = $( &#39;#changeRequired&#39; ).LiveValidator();

    $( &#39;#btn-setRequired&#39; ).click( function( e ) {
        $( input ).LiveValidator( &#39;setRequired&#39; );
    } );
    $( &#39;#btn-unsetRequired&#39; ).click( function( e ) {
        $( input ).LiveValidator( &#39;unsetRequired&#39; );
    } );
} );
&lt;/script&gt;
        &lt;/li&gt;
        
    &lt;/ul&gt;
    

&lt;/p&gt;

&lt;h3 id=&#34;the-mighty-isvalid-method&#34;&gt;The mighty isValid method&lt;/h3&gt;

&lt;p&gt;The most important method is the &lt;code&gt;isValid&lt;/code&gt; method. It will check if the jQuery object(s) - which is filtered to inputs only - is valid and passes all their constraints.



    &lt;ul class=&#34;uk-tab&#34; data-uk-tab=&#34;{connect:&#39;#switcher-example-gs-isValid-call&#39;, animation: &#39;slide-horizontal&#39;}&#34;&gt;
        &lt;li class=&#34;uk-active&#34;&gt;&lt;a href=&#34;&#34;&gt;Example&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;HTML&lt;/a&gt;&lt;/li&gt;
        
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul id=&#34;switcher-example-gs-isValid-call&#34; class=&#34;uk-switcher uk-margin&#34;&gt;
        &lt;li&gt;
            &lt;fieldset id=&#34;fieldset&#34;&gt;
    &lt;legend&gt;Multiple isValid checking&lt;/legend&gt;
    &lt;div class=&#34;row&#34;&gt;
        &lt;label&gt;Label&lt;/label&gt;
        &lt;input type=&#34;text&#34; id=&#34;isValid1&#34; required/&gt;
    &lt;/div&gt;
    &lt;div class=&#34;row&#34;&gt;
        &lt;label&gt;Label&lt;/label&gt;
        &lt;input type=&#34;text&#34; id=&#34;isValid2&#34;/&gt;
    &lt;/div&gt;
&lt;/fieldset&gt;
&lt;p id=&#34;results&#34;&gt; &lt;/p&gt;
&lt;a class=&#34;uk-button uk-margin-top&#34; id=&#34;isValid&#34;&gt;Check all&lt;/a&gt;

        &lt;/li&gt;
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;fieldset id=&amp;#34;fieldset&amp;#34;&amp;gt;
    &amp;lt;legend&amp;gt;Multiple isValid checking&amp;lt;/legend&amp;gt;
    &amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt;
        &amp;lt;label&amp;gt;Label&amp;lt;/label&amp;gt;
        &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;isValid1&amp;#34; required/&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt;
        &amp;lt;label&amp;gt;Label&amp;lt;/label&amp;gt;
        &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;isValid2&amp;#34;/&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/fieldset&amp;gt;
&amp;lt;p id=&amp;#34;results&amp;#34;&amp;gt; &amp;lt;/p&amp;gt;
&amp;lt;a class=&amp;#34;uk-button uk-margin-top&amp;#34; id=&amp;#34;isValid&amp;#34;&amp;gt;Check all&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
        &lt;/li&gt;
        
        
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$( function() {
    var $result = $( &amp;#39;#results&amp;#39; );

    $( &amp;#39;#fieldset&amp;#39; ).LiveValidator( { checks:[ &amp;#34;isNumber&amp;#34; ] } );

    $( &amp;#39;#isValid&amp;#39; ).click( function() {
        // It will filter the #fieldset&amp;#39;s inputs only
        var isValid = $( &amp;#39;#fieldset&amp;#39; ).LiveValidator( &amp;#39;isValid&amp;#39; );
        if ( isValid ) {
            $result.text( &amp;#39;Valid&amp;#39; )
                .addClass( &amp;#39;uk-text-success&amp;#39; )
                .removeClass( &amp;#39;uk-text-warning&amp;#39; );
        } else {
            $result.text( &amp;#39;Invalid&amp;#39; )
                .addClass( &amp;#39;uk-text-warning&amp;#39; )
                .removeClass( &amp;#39;uk-text-success&amp;#39; );
        }
    } );
} );
&lt;/code&gt;&lt;/pre&gt;
            &lt;script type=&#34;text/javascript&#34;&gt;$( function() {
    var $result = $( &#39;#results&#39; );

    $( &#39;#fieldset&#39; ).LiveValidator( { checks:[ &#34;isNumber&#34; ] } );

    $( &#39;#isValid&#39; ).click( function() {
        // It will filter the #fieldset&#39;s inputs only
        var isValid = $( &#39;#fieldset&#39; ).LiveValidator( &#39;isValid&#39; );
        if ( isValid ) {
            $result.text( &#39;Valid&#39; )
                .addClass( &#39;uk-text-success&#39; )
                .removeClass( &#39;uk-text-warning&#39; );
        } else {
            $result.text( &#39;Invalid&#39; )
                .addClass( &#39;uk-text-warning&#39; )
                .removeClass( &#39;uk-text-success&#39; );
        }
    } );
} );
&lt;/script&gt;
        &lt;/li&gt;
        
    &lt;/ul&gt;
    



&lt;div class=&#34;uk-alert&#34;&gt;Note how the inputs with errors are marked - automatically by this method - using the theme to guide the user in fixing them.&lt;/div&gt;

&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Options</title>
      <link>https://chesedo.github.io/LiveValidator/docs/options/</link>
      <pubDate>Wed, 20 Jul 2016 15:59:02 +0200</pubDate>
      
      <guid>https://chesedo.github.io/LiveValidator/docs/options/</guid>
      <description>

&lt;h2 id=&#34;checks&#34;&gt;Checks&lt;/h2&gt;

&lt;p&gt;&lt;p class=&#34;uk-text-muted&#34;&gt;Default: empty&lt;/p&gt;

This is an array that holds the checks for the input(s). It is important to use valid object syntax when it is set via the &lt;code&gt;data-checks&lt;/code&gt; attribute.&lt;/p&gt;

&lt;h3 id=&#34;valid-options&#34;&gt;Valid options&lt;/h3&gt;

&lt;p&gt;These options are valid when &lt;code&gt;html5validation.js&lt;/code&gt; is included - they are all from their HTML5 equivalent and auto detected if &lt;code&gt;AutoChecks.js&lt;/code&gt; is included.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Check&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;min&lt;/td&gt;
&lt;td&gt;Minimum number that can be set on an input&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;max&lt;/td&gt;
&lt;td&gt;Maximum number that can be set on an input&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;minlength&lt;/td&gt;
&lt;td&gt;The minimum number of characters needed on the input&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;maxlength&lt;/td&gt;
&lt;td&gt;The maximum number of characters allowed on the input&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;pattern&lt;/td&gt;
&lt;td&gt;A regex pattern that the input has to match. Include the helper text in the &lt;code&gt;title&lt;/code&gt; as it will be used if the pattern fails&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;isNumber&lt;/td&gt;
&lt;td&gt;Not an official HTML5 validator, but is used by &amp;ldquo;min&amp;rdquo; and &amp;ldquo;max&amp;rdquo; to make sure the input is a number.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This list can be extended by adding your own checks to the tester.&lt;/p&gt;

&lt;h4 id=&#34;pattern-example-auto-detected&#34;&gt;Pattern example (Auto detected)&lt;/h4&gt;




    &lt;ul class=&#34;uk-tab&#34; data-uk-tab=&#34;{connect:&#39;#switcher-example-options-pattern&#39;, animation: &#39;slide-horizontal&#39;}&#34;&gt;
        &lt;li class=&#34;uk-active&#34;&gt;&lt;a href=&#34;&#34;&gt;Example&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;HTML&lt;/a&gt;&lt;/li&gt;
        
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul id=&#34;switcher-example-options-pattern&#34; class=&#34;uk-switcher uk-margin&#34;&gt;
        &lt;li&gt;
            &lt;div class=&#34;row&#34;&gt;
    &lt;label&gt;Label&lt;/label&gt;
    &lt;input type=&#34;text&#34; id=&#34;pattern&#34; pattern=&#34;^[a-zA-Z]+$&#34; title=&#34;Only alphabeticals allowed&#34; /&gt;
&lt;/div&gt;

        &lt;/li&gt;
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt;
    &amp;lt;label&amp;gt;Label&amp;lt;/label&amp;gt;
    &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;pattern&amp;#34; pattern=&amp;#34;^[a-zA-Z]&amp;#43;$&amp;#34; title=&amp;#34;Only alphabeticals allowed&amp;#34; /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
        &lt;/li&gt;
        
        
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$( function() {
    $( &amp;#39;#pattern&amp;#39; ).LiveValidator();
} );
&lt;/code&gt;&lt;/pre&gt;
            &lt;script type=&#34;text/javascript&#34;&gt;$( function() {
    $( &#39;#pattern&#39; ).LiveValidator();
} );
&lt;/script&gt;
        &lt;/li&gt;
        
    &lt;/ul&gt;
    



&lt;h3 id=&#34;checks-with-parameters&#34;&gt;Checks with parameters&lt;/h3&gt;

&lt;p&gt;Some checks need to be called with extra parameters. These can be passed to the check by setting the check to an object with the key as the check&amp;rsquo;s name and the value will be the parameter.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Check&lt;/th&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;min&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;max&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;minlength&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;maxlength&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;pattern&lt;/td&gt;
&lt;td&gt;object with a &lt;code&gt;regex&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt; as keys&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;isNumber&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;parameters-example&#34;&gt;Parameters example&lt;/h4&gt;

&lt;p&gt;


    &lt;ul class=&#34;uk-tab&#34; data-uk-tab=&#34;{connect:&#39;#switcher-example-options-parameters&#39;, animation: &#39;slide-horizontal&#39;}&#34;&gt;
        &lt;li class=&#34;uk-active&#34;&gt;&lt;a href=&#34;&#34;&gt;Example&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;HTML&lt;/a&gt;&lt;/li&gt;
        
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul id=&#34;switcher-example-options-parameters&#34; class=&#34;uk-switcher uk-margin&#34;&gt;
        &lt;li&gt;
            &lt;div class=&#34;row&#34;&gt;
    &lt;label&gt;Label&lt;/label&gt;
    &lt;input type=&#34;text&#34; id=&#34;parameter&#34; /&gt;
&lt;/div&gt;

        &lt;/li&gt;
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt;
    &amp;lt;label&amp;gt;Label&amp;lt;/label&amp;gt;
    &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;parameter&amp;#34; /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
        &lt;/li&gt;
        
        
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$( function() {
    $( &amp;#39;#parameter&amp;#39; ).LiveValidator( {
        checks: [
            { minlength: 2 },
            { pattern: { regex: &amp;#34;^[0-9]&amp;#43;$&amp;#34;, title: &amp;#34;Numbers only&amp;#34; } }
        ]
    } );
} );
&lt;/code&gt;&lt;/pre&gt;
            &lt;script type=&#34;text/javascript&#34;&gt;$( function() {
    $( &#39;#parameter&#39; ).LiveValidator( {
        checks: [
            { minlength: 2 },
            { pattern: { regex: &#34;^[0-9]+$&#34;, title: &#34;Numbers only&#34; } }
        ]
    } );
} );
&lt;/script&gt;
        &lt;/li&gt;
        
    &lt;/ul&gt;
    



&lt;div class=&#34;uk-alert&#34;&gt;Note how the value can be a string, int or object.&lt;/div&gt;

&lt;/p&gt;

&lt;h2 id=&#34;live-enabled&#34;&gt;Live Enabled&lt;/h2&gt;

&lt;p&gt;&lt;p class=&#34;uk-text-muted&#34;&gt;Default: true&lt;/p&gt;

&lt;code&gt;liveEnabled&lt;/code&gt; is used to set whether checking should happen live as the user types. Setting it to false results in checking only happening once the input looses focus.&lt;/p&gt;

&lt;h3 id=&#34;disabling-live-results&#34;&gt;Disabling live results&lt;/h3&gt;




    &lt;ul class=&#34;uk-tab&#34; data-uk-tab=&#34;{connect:&#39;#switcher-example-options-live-enabled&#39;, animation: &#39;slide-horizontal&#39;}&#34;&gt;
        &lt;li class=&#34;uk-active&#34;&gt;&lt;a href=&#34;&#34;&gt;Example&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;HTML&lt;/a&gt;&lt;/li&gt;
        
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul id=&#34;switcher-example-options-live-enabled&#34; class=&#34;uk-switcher uk-margin&#34;&gt;
        &lt;li&gt;
            &lt;div class=&#34;row&#34;&gt;
    &lt;label&gt;Label&lt;/label&gt;
    &lt;input type=&#34;text&#34; id=&#34;live&#34; pattern=&#34;^[a-zA-Z]+$&#34; title=&#34;Only alphabeticals allowed&#34; /&gt;
&lt;/div&gt;

        &lt;/li&gt;
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt;
    &amp;lt;label&amp;gt;Label&amp;lt;/label&amp;gt;
    &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;live&amp;#34; pattern=&amp;#34;^[a-zA-Z]&amp;#43;$&amp;#34; title=&amp;#34;Only alphabeticals allowed&amp;#34; /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
        &lt;/li&gt;
        
        
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$( function() {
    $( &amp;#39;#live&amp;#39; ).LiveValidator( {liveEnabled: false } );
} );
&lt;/code&gt;&lt;/pre&gt;
            &lt;script type=&#34;text/javascript&#34;&gt;$( function() {
    $( &#39;#live&#39; ).LiveValidator( {liveEnabled: false } );
} );
&lt;/script&gt;
        &lt;/li&gt;
        
    &lt;/ul&gt;
    



&lt;h2 id=&#34;required&#34;&gt;Required&lt;/h2&gt;

&lt;p&gt;&lt;p class=&#34;uk-text-muted&#34;&gt;Default: false&lt;/p&gt;

Used to indicate if the input is required. It is automatically set when the input has the &lt;code&gt;required&lt;/code&gt; property.&lt;/p&gt;

&lt;h3 id=&#34;setting-required-via-property-detection&#34;&gt;Setting required via property detection&lt;/h3&gt;

&lt;p&gt;


    &lt;ul class=&#34;uk-tab&#34; data-uk-tab=&#34;{connect:&#39;#switcher-example-options-required&#39;, animation: &#39;slide-horizontal&#39;}&#34;&gt;
        &lt;li class=&#34;uk-active&#34;&gt;&lt;a href=&#34;&#34;&gt;Example&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;HTML&lt;/a&gt;&lt;/li&gt;
        
        &lt;li&gt;&lt;a href=&#34;&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul id=&#34;switcher-example-options-required&#34; class=&#34;uk-switcher uk-margin&#34;&gt;
        &lt;li&gt;
            &lt;div class=&#34;row&#34;&gt;
    &lt;label&gt;Label&lt;/label&gt;
    &lt;input type=&#34;text&#34; id=&#34;auto-required&#34; required /&gt;
&lt;/div&gt;

        &lt;/li&gt;
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt;
    &amp;lt;label&amp;gt;Label&amp;lt;/label&amp;gt;
    &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;auto-required&amp;#34; required /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
        &lt;/li&gt;
        
        
        &lt;li&gt;
            &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$( function() {
    test = $( &amp;#39;#auto-required&amp;#39; ).LiveValidator();
} );
&lt;/code&gt;&lt;/pre&gt;
            &lt;script type=&#34;text/javascript&#34;&gt;$( function() {
    test = $( &#39;#auto-required&#39; ).LiveValidator();
} );
&lt;/script&gt;
        &lt;/li&gt;
        
    &lt;/ul&gt;
    



&lt;div class=&#34;uk-alert&#34;&gt;Note that the theme automatically handles the asterisk&lt;/div&gt;

&lt;/p&gt;

&lt;h2 id=&#34;theme&#34;&gt;Theme&lt;/h2&gt;

&lt;p&gt;&lt;p class=&#34;uk-text-muted&#34;&gt;Default: undefined&lt;/p&gt;

Set the theme object that you want to use here - see themes to get the correct name. If no theme is set or if the theme is invalid, then the default will be used.&lt;/p&gt;

&lt;h3 id=&#34;theme-data&#34;&gt;Theme Data&lt;/h3&gt;

&lt;p&gt;&lt;p class=&#34;uk-text-muted&#34;&gt;Default: { error: &amp;lsquo;error&amp;rsquo;, missing: &amp;lsquo;missing&amp;rsquo;, parentSelector: &amp;lsquo;.row&amp;rsquo; }&lt;/p&gt;

The data, array or object that is set here will be passed to the theme as is. Consult the theme you are using to know how to overwrite some options.&lt;/p&gt;

&lt;h2 id=&#34;debug&#34;&gt;Debug&lt;/h2&gt;

&lt;p&gt;&lt;p class=&#34;uk-text-muted&#34;&gt;Default: false&lt;/p&gt;

This option can be used to log debug information to the console. These can be helpful to find out why something is not working - like in a bug report.&lt;/p&gt;

&lt;h3 id=&#34;options&#34;&gt;Options&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1 | true&lt;/td&gt;
&lt;td&gt;Show only &amp;lsquo;DEBUG&amp;rsquo; data&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Also show &amp;lsquo;INFO&amp;rsquo; data&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Also show &amp;lsquo;ERROR&amp;rsquo; data&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Download</title>
      <link>https://chesedo.github.io/LiveValidator/download/</link>
      <pubDate>Wed, 20 Jul 2016 14:26:22 +0200</pubDate>
      
      <guid>https://chesedo.github.io/LiveValidator/download/</guid>
      <description>

&lt;h2 id=&#34;zip-download&#34;&gt;Zip Download&lt;/h2&gt;

&lt;p&gt;To get the latest verion as a ZIP use the following button.&lt;/p&gt;


&lt;a class=&#34;uk-button uk-button-primary&#34; href=&#34;https://github.com/chesedo/LiveValidator/archive/master.zip&#34;&gt;Download&lt;/a&gt;



&lt;h3 id=&#34;html-markup-example&#34;&gt;HTML Markup Example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
        &amp;lt;title&amp;gt;Page Title&amp;lt;/title&amp;gt;
        &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/css/LiveValidatorTheme.css&amp;quot; charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;form action=&amp;quot;#&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
            &amp;lt;!-- ... --&amp;gt;
        &amp;lt;/form&amp;gt;
        &amp;lt;script src=&amp;quot;js/jquery.min.js&amp;quot; charset=&amp;quot;utf-8&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script src=&amp;quot;js/jquery-live-validator.min.js&amp;quot; charset=&amp;quot;utf-8&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script src=&amp;quot;js/live-validator-theme-default.min.js&amp;quot; charset=&amp;quot;utf-8&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
            $( function() {
                var inputs = $( &#39;form&#39; ).LiveValidator();
            } );
        &amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;div class=&#34;uk-alert&#34;&gt;Remember to include jQuery&lt;/div&gt;



&lt;h2 id=&#34;bower&#34;&gt;Bower&lt;/h2&gt;

&lt;p&gt;If you are using Bower to manage your assets, then you will find the plugin listed as &lt;code&gt;live-validator&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;install&#34;&gt;Install&lt;/h3&gt;

&lt;p&gt;It can be installed using the following&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bower install --save live-validator
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;file-structure&#34;&gt;File structure&lt;/h3&gt;

&lt;p&gt;The zip file will contain the source JavaScript and style code under the &lt;code&gt;src&lt;/code&gt; folder. It also has compiled and minified versions under the &lt;code&gt;dist&lt;/code&gt; folder.&lt;/p&gt;

&lt;h4 id=&#34;source-structure&#34;&gt;Source structure&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Folder&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;js&lt;/td&gt;
&lt;td&gt;Contains all the JavaScript code - the plugin code, tester and themes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;less&lt;/td&gt;
&lt;td&gt;Contains the styles for the themes, if the theme needs extra styles&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-markup&#34;&gt;/js
    /autoChecks
        &amp;lt;!-- Used to auto detect check from HTML5 attributes (like `min` and `max`) --&amp;gt;
        /AutoChecks.js

    /core
        &amp;lt;!-- The core that binds everything together --&amp;gt;
        LiveValidator.js

    /plugin
        &amp;lt;!-- This creates the jQuery plugin --&amp;gt;
        LiveValidatorPlugin.js

    /tester
        &amp;lt;!-- Adds tests for HTML5 attributes (sort of a polyfill) - works together with AutoChecks.js --&amp;gt;
        html5validation.js

        &amp;lt;!-- The skeleton for the tester that can be extended with your own tests --&amp;gt;
        LiveValidatorTester.js

    /themes
        &amp;lt;!-- The default theme that will be used - can be excluded if using another --&amp;gt;
        Default.js

/less
    &amp;lt;!-- The styles for the default theme --&amp;gt;
    /LiveValidatorTheme.less
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;distribution-structure&#34;&gt;Distribution structure&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Folder&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;js&lt;/td&gt;
&lt;td&gt;Contains compiled version of the JavaScripts&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;css&lt;/td&gt;
&lt;td&gt;Contains the processed styles for the themes, if the theme needs extra styles&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-markup&#34;&gt;/js
    &amp;lt;!-- Contain the core, plugin, tester and auto checks detection code --&amp;gt;
    /jquery-live-validator.js
    /jquery-live-validator.min.js

    &amp;lt;!-- The JavaScript for the default theme --&amp;gt;
    /live-validator-theme-default.js
    /live-validator-theme-default.min.js

/css
    &amp;lt;!-- The styles for the default theme --&amp;gt;
    /LiveValidatorTheme.css
    /LiveValidatorTheme.min.css
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;needed-files&#34;&gt;Needed files&lt;/h3&gt;

&lt;p&gt;If you want to include the source files into your own as a bundle maybe, then you will need these at the minimum:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LiveValidatorPlugin.js&lt;/li&gt;
&lt;li&gt;LiveValidator.js&lt;/li&gt;
&lt;li&gt;LiveValidatorTester.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And if you are using the distribution files, then one of the following is needed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jquery-live-validator.js&lt;/li&gt;
&lt;li&gt;jquery-live-validator.min.js&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;uk-alert&#34;&gt;&lt;p&gt;The default theme is optional &lt;strong&gt;as long as&lt;/strong&gt; another is supplied and set in the &lt;a href=&#34;https://chesedo.github.io/LiveValidator/docs/options/#theme&#34;&gt;options&lt;/a&gt;. If you do not supply another or do not set the options to use it, then an error will result and the plugin will not work.&lt;/p&gt;
&lt;/div&gt;


</description>
    </item>
    
  </channel>
</rss>